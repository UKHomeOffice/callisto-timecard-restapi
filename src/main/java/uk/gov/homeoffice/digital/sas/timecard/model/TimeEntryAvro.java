/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package uk.gov.homeoffice.digital.sas.timecard.model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TimeEntryAvro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2603198218542681348L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TimeEntryAvro\",\"namespace\":\"uk.gov.homeoffice.digital.sas.timecard.model\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"startTime\",\"type\":[\"string\",\"null\"]},{\"name\":\"endTime\",\"type\":[\"string\",\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   private long id;
   private java.lang.CharSequence startTime;
   private java.lang.CharSequence endTime;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TimeEntryAvro() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param startTime The new value for startTime
   * @param endTime The new value for endTime
   */
  public TimeEntryAvro(java.lang.Long id, java.lang.CharSequence startTime, java.lang.CharSequence endTime) {
    this.id = id;
    this.startTime = startTime;
    this.endTime = endTime;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return startTime;
    case 2: return endTime;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: startTime = (java.lang.CharSequence)value$; break;
    case 2: endTime = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.Long getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'startTime' field.
   * @return The value of the 'startTime' field.
   */
  public java.lang.CharSequence getStartTime() {
    return startTime;
  }

  /**
   * Sets the value of the 'startTime' field.
   * @param value the value to set.
   */
  public void setStartTime(java.lang.CharSequence value) {
    this.startTime = value;
  }

  /**
   * Gets the value of the 'endTime' field.
   * @return The value of the 'endTime' field.
   */
  public java.lang.CharSequence getEndTime() {
    return endTime;
  }

  /**
   * Sets the value of the 'endTime' field.
   * @param value the value to set.
   */
  public void setEndTime(java.lang.CharSequence value) {
    this.endTime = value;
  }

  /**
   * Creates a new TimeEntryAvro RecordBuilder.
   * @return A new TimeEntryAvro RecordBuilder
   */
  public static uk.gov.homeoffice.digital.sas.timecard.model.TimeEntryAvro.Builder newBuilder() {
    return new uk.gov.homeoffice.digital.sas.timecard.model.TimeEntryAvro.Builder();
  }

  /**
   * Creates a new TimeEntryAvro RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TimeEntryAvro RecordBuilder
   */
  public static uk.gov.homeoffice.digital.sas.timecard.model.TimeEntryAvro.Builder newBuilder(uk.gov.homeoffice.digital.sas.timecard.model.TimeEntryAvro.Builder other) {
    return new uk.gov.homeoffice.digital.sas.timecard.model.TimeEntryAvro.Builder(other);
  }

  /**
   * Creates a new TimeEntryAvro RecordBuilder by copying an existing TimeEntryAvro instance.
   * @param other The existing instance to copy.
   * @return A new TimeEntryAvro RecordBuilder
   */
  public static uk.gov.homeoffice.digital.sas.timecard.model.TimeEntryAvro.Builder newBuilder(uk.gov.homeoffice.digital.sas.timecard.model.TimeEntryAvro other) {
    return new uk.gov.homeoffice.digital.sas.timecard.model.TimeEntryAvro.Builder(other);
  }

  /**
   * RecordBuilder for TimeEntryAvro instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TimeEntryAvro>
    implements org.apache.avro.data.RecordBuilder<TimeEntryAvro> {

    private long id;
    private java.lang.CharSequence startTime;
    private java.lang.CharSequence endTime;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(uk.gov.homeoffice.digital.sas.timecard.model.TimeEntryAvro.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.startTime)) {
        this.startTime = data().deepCopy(fields()[1].schema(), other.startTime);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.endTime)) {
        this.endTime = data().deepCopy(fields()[2].schema(), other.endTime);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing TimeEntryAvro instance
     * @param other The existing instance to copy.
     */
    private Builder(uk.gov.homeoffice.digital.sas.timecard.model.TimeEntryAvro other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.startTime)) {
        this.startTime = data().deepCopy(fields()[1].schema(), other.startTime);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.endTime)) {
        this.endTime = data().deepCopy(fields()[2].schema(), other.endTime);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.Long getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public uk.gov.homeoffice.digital.sas.timecard.model.TimeEntryAvro.Builder setId(long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public uk.gov.homeoffice.digital.sas.timecard.model.TimeEntryAvro.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'startTime' field.
      * @return The value.
      */
    public java.lang.CharSequence getStartTime() {
      return startTime;
    }

    /**
      * Sets the value of the 'startTime' field.
      * @param value The value of 'startTime'.
      * @return This builder.
      */
    public uk.gov.homeoffice.digital.sas.timecard.model.TimeEntryAvro.Builder setStartTime(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.startTime = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'startTime' field has been set.
      * @return True if the 'startTime' field has been set, false otherwise.
      */
    public boolean hasStartTime() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'startTime' field.
      * @return This builder.
      */
    public uk.gov.homeoffice.digital.sas.timecard.model.TimeEntryAvro.Builder clearStartTime() {
      startTime = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'endTime' field.
      * @return The value.
      */
    public java.lang.CharSequence getEndTime() {
      return endTime;
    }

    /**
      * Sets the value of the 'endTime' field.
      * @param value The value of 'endTime'.
      * @return This builder.
      */
    public uk.gov.homeoffice.digital.sas.timecard.model.TimeEntryAvro.Builder setEndTime(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.endTime = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'endTime' field has been set.
      * @return True if the 'endTime' field has been set, false otherwise.
      */
    public boolean hasEndTime() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'endTime' field.
      * @return This builder.
      */
    public uk.gov.homeoffice.digital.sas.timecard.model.TimeEntryAvro.Builder clearEndTime() {
      endTime = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public TimeEntryAvro build() {
      try {
        TimeEntryAvro record = new TimeEntryAvro();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.startTime = fieldSetFlags()[1] ? this.startTime : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.endTime = fieldSetFlags()[2] ? this.endTime : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
