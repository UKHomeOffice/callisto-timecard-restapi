workspace {

    model {
		enterprise "Home Office" {
			user = person "User" "" "User"
			manager = person "Manager" "" "Manager"
			planner = person "Planner" "" "Planner" 
		
			timecardSystem = softwaresystem "TimeCard service" "Allows users to record thier worked time and view their planned time. Managers can view team members worked and planned time." {
				singlePageApplication = container "Single-Page Application" "Provides all of the Time card functionality to customers via their web browser." "React" "Web Browser"
				scheduledEventsProducer = container "Scheduled Events Producer" "Provides a stream of events detailing scheduling data"
				referenceDataService = container "Reference Data service" "Provides access time entry and absence reference data"
				personService = container "Person service" "Provides access to a person's meal-break entitlement"
				timecardAPIApplication = container "TimeCard API Application" "Provides timecard functionality via JSON/HTTPS API" "Java and SpringBoot" {
					scheduledEventsConsumer = component "Scheduled Events Consumer" "Listens for ScheduledActivityEvent instances" "Kafka topic consumer"	
					timecardController = component "TimeCard controller" "Provides access to time card functionality via RESTful interface" "Spring REST Controller"					
					timecardComponent = component "TimeCard component" "Provides functionality related to viewing, creating, updating and deleting time card data" "Spring Bean"										
				}	
				database = container "Database" "Stores TimeCard, TimeCardEntry, Notes & FlexChange entities" "Tech TBC" "Database"			
			}
		}
		
		# relationships between people and software systems
        user -> timecardSystem "records worked time, views planned time and makes flex changes using"
		manager -> timecardSystem "views team members worked time, views planned time and makes flex changes using"
		
        # relationships to/from containers
        user -> singlePageApplication "records worked time, views planned time and makes flex changes using"
		manager -> singlePageApplication "views team members worked time, views planned time and makes flex changes"
        planner -> scheduledEventsProducer "triggers the production of ScheduledActivityEvent instances"
		
        # relationships to/from components
		scheduledEventsConsumer -> scheduledEventsProducer "Consumes events from" "JSON/HTTPS"
		scheduledEventsProducer -> timecardController "Uses"
		timecardController -> personService "Makes API calls to" "JSON/HTTPS"	
		timecardController -> timecardComponent "Uses"
		timecardComponent -> database "Reads from and writes to" "JDBC"
		singlePageApplication -> timecardController "Makes API calls to" "JSON/HTTPS"
		singlePageApplication -> referenceDataService "Makes API calls to" "JSON/HTTPS"
    }

    views {
	
	    container timecardSystem "Containers" {
            include *
            animation {
				timecardAPIApplication
				database
				scheduledEventsProducer
				personService
				singlePageApplication
				referenceDataService
            }
            autoLayout
        }	
		
        component timecardAPIApplication "Components" {
            include *
            animation {
				singlePageApplication
				scheduledEventsProducer
				personService   	
				scheduledEventsConsumer
				timecardController
				timecardComponent
            }
            autoLayout
        }
		
         dynamic timecardAPIApplication "viewTimeCard" "Summarises attempt to retrieve a TimeCard for a given date" {
            singlePageApplication -> timecardController "Submits request to get timecard(timecardDate, timecardOwnerId, tenantId) command on"
            timecardController -> timecardComponent "Validates date using"
            timecardComponent -> database "SELECT FROM timecards WHERE timecardDate = ? AND timecardOwnerId = ? AND tenantId = ?"
            database -> timecardComponent "Returns result set with zero or one results"
            timecardComponent -> timecardController "If zero results then returns back null timecard to. Else returns timecard to"
            timecardController -> singlePageApplication "If null timecard then sends timecard does not exist status to. Else sends timecard to"            
            autoLayout
        }
		
        dynamic timecardAPIApplication "getTimeEntryDescriptor" "Gets the description of what data types are needed to record a given TimeEntryType" {
			singlePageApplication -> referenceDataService "Submits request to get timeentry descriptor(TimeEntryType) on"
			referenceDataService -> singlePageApplication "returns TimeEntryDescriptor"        
            autoLayout
        }	

		dynamic timecardAPIApplication "enterDateTime" "Creates a DateTime based TimeEntry " {
			user -> singlePageApplication "selects TimeEntryType for a DateTime TimeEntry"
			singlePageApplication -> referenceDataService "Submits request to get timeentry descriptor(TimeEntryType) on"
			referenceDataService -> singlePageApplication "returns TimeEntryDescriptor" 
			singlePageApplication -> singlePageApplication "Assembles DateTime entry fields based on TimeEntryDescriptor"
			singlePageApplication -> user "Sends DateTime entry fields to"
			user -> singlePageApplication "submits DateTime"
			singlePageApplication -> singlePageApplication "Assembles TimeEntry based on DateTime"
			singlePageApplication -> user "Sends back TimeEntry to"
            autoLayout
        }	

        dynamic timecardAPIApplication "enterDate" "Creates a Date based TimeEntry " {
			user -> singlePageApplication "selects TimeEntryType for a Date TimeEntry"
			singlePageApplication -> referenceDataService "Submits request to get timeentry descriptor(TimeEntryType) on"
			referenceDataService -> singlePageApplication "returns TimeEntryDescriptor" 
			singlePageApplication -> singlePageApplication "Assembles Date entry fields based on TimeEntryDescriptor"
			singlePageApplication -> user "Sends Date entry fields to"
			user -> singlePageApplication "submits Date"
			singlePageApplication -> singlePageApplication "Assembles TimeEntry based on Date"
			singlePageApplication -> user "Sends back TimeEntry to"
            autoLayout
        }	

        dynamic timecardAPIApplication "storeTimeEntry" "Persists a TimeEntry " {
			user -> singlePageApplication "submits TimeEntry to be stored against a given TimeCard"
			singlePageApplication -> timecardController "submits request to create timeentry(tenantId, timecardId, TimeEntry)"
			timecardController -> timecardComponent "Validates new TimeEntry using"
            timecardComponent -> database "If TimeEntry does not exist then INSERT INTO timeentrys VALUES... Else UPDATE timeentys SET... WHERE timeentryId = ? AND tenantId = ?""
            database -> timecardComponent "Returns success status and TimeEntry ID to"
            timecardComponent -> timecardController "Returns success status, and TimeEntry ID to"
            timecardController -> singlePageApplication "Sends back success status, TimeEntry ID and message to"
			singlePageApplication -> user "Sends back success message to"
            autoLayout
        }		
        
        styles {
            element "Person" {
                color #ffffff
                fontSize 22
                shape Person
            }
            element "User" {
                background #08427b
            }  
            element "Manager" {
                background #08427b
            } 
            element "Planner" {
                background #08427b
            }             
            element "Software System" {
                background #1168bd
                color #ffffff
            }			
            element "Container" {
                background #438dd5
                color #ffffff
            }
            element "Database" {
                shape Cylinder
            }
            element "Component" {
                background #85bbf0
                color #000000
            }			
        } 
    }
}
