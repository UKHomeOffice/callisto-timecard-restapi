---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}
  labels:
    app: {{ .Release.Name }}
  {{- if ne .Values.environment "prod" }}
  annotations:
    downscaler/uptime: Mon-Fri 08:00-20:00 Europe/London
  {{ end }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}
    spec:
      securityContext:
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 2000
      containers:
        - name: timecard-restapi
          image: {{ .Values.image.repo }}callisto-timecard-restapi:{{ .Values.image.tag }}
          imagePullPolicy: Always
          resources:
            requests:
              memory: '512Mi'
              cpu: '500m'
            limits:
              memory: '1Gi'
              cpu: '1500m'
          ports:
            - name: http
              containerPort: 9090
          volumeMounts:
            - mountPath: /timecard-keystore
              name: keystore-volume
          env: {{ toYaml .Values.env.database | nindent 12 }}
          {{ toYaml .Values.env.kafka | nindent 12 }}
      initContainers:
        - name: timecard-database
          image: {{ .Values.image.repo }}callisto-timecard-database:{{ .Values.image.tag }}
          imagePullPolicy: Always
          env: {{ toYaml .Values.env.database | nindent 12 }}
          args:
            - "--url=jdbc:postgresql://$(DATABASE_ENDPOINT):$(DATABASE_PORT)/$(DATABASE_NAME)"
            - "--username=$(DATABASE_USERNAME)"
            - "--password=$(DATABASE_PASSWORD)"
            - "--changeLogFile=changelog/db.changelog-main.yml"
            - "--liquibaseSchemaName=timecard"
            - "update"
        {{- if eq .Values.environment "dev" }}
        - name: timecard-create-keystore
          image: {{ .Values.image.ecr_repo }}awscli-java-openssl:latest
          imagePullPolicy: Always
          env: {{ toYaml .Values.env.kafka | nindent 12 }}
            - name: MOUNT_PATH
              value: {{ .Values.keystore.volume_mountpath }}
          command: [ "/bin/sh" ]
          args: [ "/scripts/create-keystore.sh", "timecard", "$(MOUNT_PATH)" ,"$(AWS_CERTIFICATE_AUTHORITY_ARN)", "$(BOOTSTRAP_SERVER)", "$(TIMECARD_KEYSTORE_PASSWORD)", "$(AWS_ACCESS_KEY)", "$(AWS_SECRET_KEY)"]
          volumeMounts:
            - name: keystore-script-volume
              mountPath: {{ .Values.keystore.script_mountpath }}{{ .Values.keystore.script_subpath}}
              subPath: {{ .Values.keystore.script_subpath }}
            - name: keystore-volume
              mountPath: {{ .Values.keystore.volume_mountpath }}
        {{ end }}
      volumes:
      - name: keystore-script-volume
        configMap:
            name: {{ .Release.Name }}-keystore-script
      - name: keystore-volume
        persistentVolumeClaim:
          claimName: {{ .Release.Name }}-volume-claim

